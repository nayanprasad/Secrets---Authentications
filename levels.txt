___________________________________________________________________________________________________________________________________________                                                               
LEVEL 1 - user name and password without encryption
__________________________________________________________________________________________________________________________________________

const express = require("express")
const ejs = require("ejs");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://localhost:27017/userDB");

const userSchema = {
    email : String,
    password : String
};

const User = mongoose.model("User", userSchema);

app.get("/", function (req, res) {
    res.render("home");
});

app.get("/login", function (req, res) {
    res.render("login");
});

app.get("/register", function (req, res) {
    res.render("register");
});

app.post("/register", function (req, res) { 
    const newUser = new User({
        email : req.body.username,
        password : req.body.password
    });

    newUser.save(function (err) { 
        if(err){
            console.log(err);
        }
        else{
            res.render("secrets");
        }
     });

 });

app.post("/login", function (req, res) { 
    User.findOne({email : req.body.username}, function (err, foundUser) { 
        if(err){
            console.log(err);
        }
        else{
            if(foundUser){
                if(foundUser.password === req.body.password){
                    res.render("secrets");
                }
                else{
                    console.log("incorrect password")
                }
            }
            else{
                console.log("no user found")
            }
           
        }
     });
 }) ;


app.listen("3000", function () {
    console.log("server started...");
})



___________________________________________________________________________________________________________________________________________
LEVEL 2  - password is encrypted
__________________________________________________________________________________________________________________________________________

const express = require("express");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const encrypt = require('mongoose-encryption');  //*****   // npm i mongoose-encryption

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://localhost:27017/userDB");

const userSchema = new mongoose.Schema({      //***** 
    email : String,
    password : String
});

const secret = "imhadesgodofriches";       //***** 
userSchema.plugin(encrypt, { secret : secret, encryptFields : ["password"]})     //*****

const User = mongoose.model("User", userSchema);

app.get("/", function (req, res) {
    res.render("home");
});

app.get("/login", function (req, res) {
    res.render("login");
});

app.get("/register", function (req, res) {
    res.render("register");
});

app.post("/register", function (req, res) { 
    const newUser = new User({
        email : req.body.username,
        password : req.body.password
    });

    newUser.save(function (err) { 
        if(err){
            console.log(err);
        }
        else{
            res.render("secrets");
        }
     });

 });

app.post("/login", function (req, res) { 
    User.findOne({email : req.body.username}, function (err, foundUser) { 
        if(err){
            console.log(err);
        }
        else{
            if(foundUser){
                if(foundUser.password === req.body.password){
                    res.render("secrets");
                }
                else{
                    console.log("incorrect password")
                }
            }
            else{
                console.log("no user found")
            }
           
        }
     });
 }) ;


app.listen("3000", function () {
    console.log("server started...");
})

___________________________________________________________________________________________________________________________________________
LEVEL 2.1   - added environmental variable
__________________________________________________________________________________________________________________________________________

require('dotenv').config();
const express = require("express");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const encrypt = require('mongoose-encryption');  

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://localhost:27017/userDB");

const userSchema = new mongoose.Schema({   
    email : String,
    password : String
});

// console.log(process.env.SECRETE);  
userSchema.plugin(encrypt, { secret : process.env.SECRETE, encryptFields : ["password"]})  

const User = mongoose.model("User", userSchema);

app.get("/", function (req, res) {
    res.render("home");
});

app.get("/login", function (req, res) {
    res.render("login");
});

app.get("/register", function (req, res) {
    res.render("register");
});

app.post("/register", function (req, res) { 
    const newUser = new User({
        email : req.body.username,
        password : req.body.password
    });

    newUser.save(function (err) { 
        if(err){
            console.log(err);
        }
        else{
            res.render("secrets");
        }
     });

 });

app.post("/login", function (req, res) { 
    User.findOne({email : req.body.username}, function (err, foundUser) { 
        if(err){
            console.log(err);
        }
        else{
            if(foundUser){
                if(foundUser.password === req.body.password){
                    res.render("secrets");
                }
                else{
                    console.log("incorrect password")
                }
            }
            else{
                console.log("no user found")
            }
           
        }
     });
 }) ;

app.listen("3000", function () {
    console.log("server started...");
})

___________________________________________________________________________________________________________________________________________
LEVEL 3   - hashing by md5
__________________________________________________________________________________________________________________________________________

const express = require("express");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const encrypt = require('mongoose-encryption');  
const md5 = require("md5");   //****

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://localhost:27017/userDB");

const userSchema = new mongoose.Schema({   
    email : String,
    password : String
});


const User = mongoose.model("User", userSchema);

app.get("/", function (req, res) {
    res.render("home");
});

app.get("/login", function (req, res) {
    res.render("login");
});

app.get("/register", function (req, res) {
    res.render("register");
});

app.post("/register", function (req, res) { 
    const newUser = new User({
        email : req.body.username,
        password : md5(req.body.password)   // ********
    });

    newUser.save(function (err) { 
        if(err){
            console.log(err);
        }
        else{
            res.render("secrets");
        }
     });

 });

app.post("/login", function (req, res) { 
    User.findOne({email : req.body.username}, function (err, foundUser) { 
        if(err){
            console.log(err);
        }
        else{
            if(foundUser){
                if(foundUser.password === md5(req.body.password)){  // ********
                    res.render("secrets");
                }
                else{
                    console.log("incorrect password")
                }
            }
            else{
                console.log("no user found")
            }
           
        }
     });
 });

 app.listen("3000", function () {
    console.log("server started...");
})


___________________________________________________________________________________________________________________________________________
LEVEL 4   - hashing/ saltRounds by   bcrypt
__________________________________________________________________________________________________________________________________________


const express = require("express");
const ejs = require("ejs");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const encrypt = require('mongoose-encryption');
const bcrypt  = require('bcrypt');  // ******
const saltRounds = 10;   // ******


const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://localhost:27017/userDB");

const userSchema = new mongoose.Schema({
    email: String,
    password: String
});


const User = mongoose.model("User", userSchema);

app.get("/", function (req, res) {
    res.render("home");
});

app.get("/login", function (req, res) {
    res.render("login");
});

app.get("/register", function (req, res) {
    res.render("register");
});

app.post("/register", function (req, res) {
    bcrypt.hash(req.body.password, saltRounds, function(err, hash) {  // ******
        if(!err){
            const newUser = new User({
                email: req.body.username,
                password: hash
            });
        
            newUser.save(function (err) {
                if (err) {
                    console.log(err);
                }
                else {
                    res.render("secrets");
                }
            }); 
        }
        else{
            console.log(err);
        }
    });

});

app.post("/login", function (req, res) {
    User.findOne({ email: req.body.username }, function (err, foundUser) {
        if (err) {
            console.log(err);
        }
        else {
            if (foundUser) {

                bcrypt.compare(req.body.password, foundUser.password, function(err, result) {  // ******
                    if(result == true){
                        res.render("secrets");
                    }
                    
                    else{
                        console.log("incorrect password")
                    }
                })
            }
            else {
                console.log("no user found")
            }

        }
    });
});

app.listen("3000", function () {
    console.log("server started...");
})
